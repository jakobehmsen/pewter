Paths = Java.type("java.nio.file.Paths")
Files = Java.type("java.nio.file.Files")
File = Java.type("java.io.File")
String = Java.type("java.lang.String")
StreamSupport = Java.type("java.util.stream.StreamSupport")
JFileChooser = Java.type("javax.swing.JFileChooser")
Arrays = Java.type("java.util.Arrays")
Math = Java.type("java.lang.Math")
ScriptEngineManager = Java.type("javax.script.ScriptEngineManager")

function getName() {
    return "Folder based project"
}

function open(node) {
    var fc = new JFileChooser()
    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY)

    if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        var filePath = fc.getSelectedFile().getAbsolutePath()
        loadProject(node, filePath)
        return true
    }

    return false
}


function ResourceDriver(fileName, text) {
    this.fileName = fileName
    this.text = text;

    this.addResource = function(name, text) {
        var driver = new MyResourceDriver(name + ".txt", text)
        driver.parent = this
        return driver
    }
    this.removeResource = function(name) {

    }
    this.path = function() {
        var thisName = this.fileName.replaceFirst("[.][^.]+$", "")
        return this.parent.path() + "/" + thisName
        /*if(this.parent !== undefined)
            this.parent.path() + "/" + thisName
        return this.basePath + "/" + thisName*/
    }
    this.setName = function(name) {
        print("this.name:" + this.fileName)
        print("setName:" + name)
        var oldPath = Paths.get(this.parent.path(), this.fileName)
        var newPath = Paths.get(this.parent.path(), name + ".txt")
        print("oldPath:" + oldPath)
        print("newPath:" + newPath)
        Files.move(oldPath, newPath)
        var thisName = this.fileName.replaceFirst("[.][^.]+$", "")
        var oldPathImplementors = Paths.get(this.parent.path(), thisName + "-implementors")
        if(oldPathImplementors.toFile().exists()) {
            var newPathImplementors = Paths.get(this.parent.path(), name + "-implementors")
            Files.move(oldPathImplementors, newPathImplementors)
        }

        this.fileName = name + ".txt"
    }
    this.setText = function(text) {

    }
}

function loadProject(node, file) {
    var filter
    if(Paths.get(file, "filter").toFile().exists()) {
        print("filter exists")
        var filterScript = new String(Files.readAllBytes(Paths.get(file, "filter")))
        var filterObject = loadWithNewGlobal({
            name: "filterObject",
            script: filterScript + "\nthis"
        })
        filter = filterObject.acceptsFile
    } else {
        filter = function(f) {return true}
    }

    Arrays.asList(new File(file).listFiles()).stream()
        .filter(function(f) {return f.isDirectory()})
        .forEach(function(f /*e.g. Nashorn*/) {
            print(f.getAbsolutePath())
            var resourceNode = node.getResource(f.getName())
            // TODO: Set top level driver
            print("create driver");
            var driver = new ResourceDriver(f.getName(), "")
            print("created driver");
            print("setting name");
            //driver.name = f.getName();
            print("driver.name:" + driver.name);
            //driverInstance.setMyName(f.getName());
            print("set name");
            var basePath = f.getParentFile().getAbsolutePath();
            print("basePath:" + f.getParentFile().getAbsolutePath());
            print("basePath:" + driver.basePath);
            driver.parent = {
                //basePath: basePath,
                path: function() {
                    return basePath
                }
            }
            //driver.text = text;
            resourceNode.setDriver(driver);

            loadDir(resourceNode, f, filter, driver)
        });
}

function loadDir(node, dirPath, filter, parentDriver) {
    Arrays.asList(new File(dirPath).listFiles()).stream()
        .filter(function(f) {return f.isFile() && filter(f)})
        .forEach(function(f) {
            print("file: " + f.getAbsolutePath())

            var text = new String(Files.readAllBytes(Paths.get(f.getAbsolutePath())))
            var name = f.getName().replaceFirst("[.][^.]+$", "")
            node.addResource(name, text)
            var resourceNode = node.getResource(name)
            var driver = new ResourceDriver(f.getName(), text)
            driver.parent = parentDriver
            resourceNode.setDriver(driver)
            // TODO: Set driver

            var implementorsPath = Paths.get(f.getParentFile().getAbsolutePath(), name +"-implementors").toFile()
            if(implementorsPath.exists()) {
                print(implementorsPath)
                loadDir(resourceNode, implementorsPath, filter, driver)
            }
        });
}