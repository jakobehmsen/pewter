Paths = Java.type("java.nio.file.Paths")
Files = Java.type("java.nio.file.Files")
File = Java.type("java.io.File")
String = Java.type("java.lang.String")
StreamSupport = Java.type("java.util.stream.StreamSupport")
JFileChooser = Java.type("javax.swing.JFileChooser")
Arrays = Java.type("java.util.Arrays")
Math = Java.type("java.lang.Math")
ScriptEngineManager = Java.type("javax.script.ScriptEngineManager")

function getName() {
    return "Folder based project"
}

function open(node) {
    var fc = new JFileChooser()
    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY)

    if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        var filePath = fc.getSelectedFile().getAbsolutePath()
        loadProject(node, filePath)
        return true
    }

    return false
}

function evalInContext(js, context) {
    //# Return the results of the in-line anonymous function we .call with the passed context
    return function() { return eval(js); }.call(context);
}

function loadProject(node, file) {
    var filter
    if(Paths.get(file, "filter").toFile().exists()) {
        print("filter exists")
        var filterScript = new String(Files.readAllBytes(Paths.get(file, "filter")))
        //var filterReader = Files.newBufferedReader(Paths.get(file.getAbsolutePath(), "filter"))
        //var engine = ScriptEngineManager.getEngineByName("Nashorn")
        //engine.eval(filterReader)
        //engine.
        /*var filterObject = {
            evalInContext: function() {
                eval(filterScript)
            }
        }
        //filterObject.evalInContext.call(filterObject);*/
        //var filterObject = {}
        //evalInContext(filterScript, filterObject)
        //eval.call({x: 2}, "print(this.x)");
        var filterObject = loadWithNewGlobal({
            name: "filterObject",
            script: filterScript + "\nthis"
        })
        //eval(filterScript, filterObject)
        //var filterObject = {}
        //eval.call(filterObject, filterScript)
        //eval.apply(filterObject, [filterScript])
        //eval(filterScript, filterObject)
        print(filterObject)
        print(filterObject.acceptsFile)
        print(acceptsFile)
        filter = function(f) {return true}
    } else {
        filter = function(f) {return true}
    }

    Arrays.asList(new File(file).listFiles()).stream()
        .filter(function(f) {return f.isDirectory()})
        .forEach(function(f /*e.g. Nashorn*/) {
            print(f.getAbsolutePath())
            var resourceNode = node.getResource(f.getName())

            loadDir(resourceNode, f)
        });
}

function loadDir(node, dirPath, filter) {
    Arrays.asList(new File(dirPath).listFiles()).stream()
        .filter(function(f) {return f.isFile()})
        .forEach(function(f) {
            print("file: " + f.getAbsolutePath())

            var text = new String(Files.readAllBytes(Paths.get(f.getAbsolutePath())))
            //var name = f.getName().substring(0, Math.max(f.getName().indexOf("."), f.getName().length()));
            var name = f.getName().replaceFirst("[.][^.]+$", "")
            node.addResource(name, text)
            var resourceNode = node.getResource(name)

            var implementorsPath = Paths.get(f.getParentFile().getAbsolutePath(), name +"-implementors").toFile()
            if(implementorsPath.exists()) {
                print(implementorsPath)
                loadDir(resourceNode, implementorsPath)
            }
        });
}